[core]

    abbrev = 12
	quotepath = false
	untrackedcache = true
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    autocrlf = input
    editor = code
    excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes
	pager = diff-so-fancy | less --tabs=4 -RFX

[user]

	name = Nicholas Adamou
	email = nicholasadamouemail@gmail.com

    # Do not guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true

[github]

	# user = <enter user here>
	# token = <enter token here>

[credential]

	helper = cache --timeout=3600

[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    followTags = true

    # Make `git push` only to the current branch

    default = simple

[diff]

	algorithm = patience
	indentHeuristic = true
	mnemonicPrefix = true
	renames = copies
	tool = Kaleidoscope

[diff "exif"]

	textconv = exiftool

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump -v -C

[difftool]

	prompt = false

[difftool "Kaleidoscope"]

	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[merge]

	ff = only
	tool = Kaleidoscope
	conflictStyle = diff3

[mergetool]
	prompt = false
	keepBackup = true

[mergetool "Kaleidoscope"]

	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

[alias]

    a   = commit --amend
    br  = branch
    c   = commit
    ca  = !git add -A && git commit                 # Commit all changes.
    co  = checkout
    cp  = cherry-pick
    d   = diff
    dc  = diff --cached
    f   = fetch
    g   = log --graph --pretty=custom               # Show custom graph.
    l   = log --pretty=custom                       # Show custom log.
    lc  = shortlog --email --numbered --summary     # List contributors.
    p   = push
    r   = rebase
    rlc = reset --hard HEAD~1                       # Remove last commit.
    s   = status
    ulc = reset --soft HEAD~1                       # Undo last commit.
    w   = instaweb --httpd=webrick                  # Start web-based visualizer.
    gmodu = submodule update --recursive --remote   # Updates each respective submodule
    gamod = update-index --add --chmod=+x           # Make a file executable.
                                                    # see: https://stackoverflow.com/a/38285435/5290011

	# EMOJI-LOG
	# see: https://github.com/ahmadawais/Emoji-Log
	# Git Commit, Add all and Push ‚Äî in one step.
	cap = "!f() { git add .; git commit -m \"$@\"; git push; }; f"

	# NEW.
	new = "!f() { git cap \"üì¶ NEW: $@\"; }; f"
	# IMPROVE.
	imp = "!f() { git cap \"üëå IMPROVE: $@\"; }; f"
	# FIX.
	fix = "!f() { git cap \"üêõ FIX: $@\"; }; f"
	# RELEASE.
	rlz = "!f() { git cap \"üöÄ RELEASE: $@\"; }; f"
	# DOC.
	doc = "!f() { git cap \"üìñ DOC: $@\"; }; f"
	# TEST.
	tst = "!f() { git cap \"‚úÖ TEST: $@\"; }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

[color]

	ui = true

[color "diff-highlight"]

	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

	frag = magenta bold
	meta = yellow
	new = green bold
	old = red bold
	commit = yellow bold
	whitespace = red reverse

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     ‚îÇ        ‚îÇ            ‚îÇ            ‚îÇ             ‚îî‚îÄ author name
    #                     ‚îÇ        ‚îÇ            ‚îÇ            ‚îî‚îÄ message
    #                     ‚îÇ        ‚îÇ            ‚îî‚îÄ date (relative)
    #                     ‚îÇ        ‚îî‚îÄ decorations (branch, heads or tags)
    #                     ‚îî‚îÄ hash (abbreviated)
